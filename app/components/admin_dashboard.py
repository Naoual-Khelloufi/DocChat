from collections import defaultdict
import streamlit as st
from core.auth import crud, database
import pandas as pd
from datetime import datetime, timedelta
from sqlalchemy import select
from reporting.db import SessionLocal as RepSession, Event, init_db
import base64
import mimetypes
from pathlib import Path
from utils.nav import navigate

# ------------------------------------------------------------------ #
# Helpers
# ------------------------------------------------------------------ #
def _user_row(u):
    """Affiche une ligne utilisateur + boutons d'action."""
    col1, col2, col3 = st.columns([4, 1, 1])
    badge = "üõ°Ô∏è **Admin**" if u.is_admin else "üë§ User"
    # nom cliquable ‚Üí d√©tail
    if col1.button(f"**{u.username}** ‚Äî {badge}", key=f"detail-{u.id}"):
        st.session_state.selected_user_id = u.id
    # bouton suppression (prot√®ge les admins)
    if not u.is_admin:
        if col2.button("‚ùå Supprimer", key=f"del-{u.id}"):
            return "delete"
    return None


def _user_detail(u):
    """Affiche la fiche d√©taill√©e d‚Äôun utilisateur s√©lectionn√©."""
    st.subheader(f"D√©tail de **{u.username}**")
    st.write(f"- **ID** : `{u.id}`")
    st.write(f"- **Email** : `{u.email or '‚Äî'}`")
    st.write(f"- **R√¥le** : {'Admin' if u.is_admin else 'Utilisateur'}")
    st.write(f"- **Hash mot de passe** : `{u.password_hash}`")
    st.write(f"- **Cr√©√© le** : {u.created_at.strftime('%d/%m/%Y %H:%M') if hasattr(u,'created_at') else 'N/A'}")
    st.markdown("---")

     # ‚îÄ‚îÄ‚îÄ 1. R√©cup√©rer tout l'historique ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    db = database.SessionLocal()
    history = crud.get_user_history(db, u.id)  # plus de limite

    if not history:
        st.info("Aucun historique trouv√©.")
        return

    # ‚îÄ‚îÄ‚îÄ 2. Grouper par date (AAAA-MM-JJ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    grouped = defaultdict(list)
    for h in history:
        grouped[h.timestamp.strftime("%Y-%m-%d")].append(h)

    # Trier les dates r√©centes d'abord
    dates_sorted = sorted(grouped.keys(), reverse=True)

    # ‚îÄ‚îÄ‚îÄ 3. Selectbox : aucune date pr√©-s√©lectionn√©e ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    sel_key = f"selected_history_date_{u.id}"
    placeholder = "üìÖ Choisir une date"
    selected_date = st.selectbox(
        "Historique par date",
        options=[placeholder] + dates_sorted,
        index=0,
        key=sel_key,
    )

    # ‚îÄ‚îÄ‚îÄ 4. Afficher l‚Äôhistorique seulement si une vraie date est choisie ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if selected_date != placeholder:
        st.markdown(f"### üí¨ Conversations du {selected_date}")
        for h in grouped[selected_date]:
            st.markdown(f"**üïë {h.timestamp.strftime('%H:%M:%S')}**")
            st.markdown(f"**‚ùì Q :** {h.question}")
            st.markdown(f"**üí¨ R :** {h.answer}")
            st.markdown("-----")

def _load_reporting_df(date_from, date_to, event_types=None, user_filter=""):
    init_db()
    from datetime import datetime as dt
    with RepSession() as s:
        q = select(Event).where(
            Event.created_at >= dt.combine(date_from, dt.min.time()),
            Event.created_at <  dt.combine(date_to + timedelta(days=1), dt.min.time()),
        )
        if event_types:
            q = q.where(Event.event_type.in_(event_types))
        if user_filter.strip():
            q = q.where(Event.user_id == user_filter.strip())
        rows = s.execute(q).scalars().all()

    data = [{
        "created_at": r.created_at,
        "event_type": r.event_type,
        "user_id": r.user_id,
        "status": r.status,
        "latency_ms": r.latency_ms,
        #"tokens_in": r.tokens_in,
        #"tokens_out": r.tokens_out,
        #"score": r.score,
        #"feedback": r.feedback,
        "filename": (r.payload or {}).get("filename"),
        #"doc_ids": (r.payload or {}).get("doc_ids"),
        "doc_id": (r.payload or {}).get("doc_id"),
    } for r in rows]
    return pd.DataFrame(data)

# ------------------------------------------------------------------ #
# Page principale
# ------------------------------------------------------------------ #
def _load_css(path: str = "assets/style-login.css"):
    p = Path(path)
    if p.exists():
        st.markdown(f"<style>{p.read_text(encoding='utf-8')}</style>", unsafe_allow_html=True)

def _img_data_uri(path: str) -> str:
    mime, _ = mimetypes.guess_type(path)
    if not mime:
        mime = "image/png"
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("ascii")
    return f"data:{mime};base64,{b64}"
def render():
    _load_css()
    src = _img_data_uri("assets/logo_1.png")  
    st.markdown(
        f"""
        <div class="login-logo">
            <img src="{src}" alt="DocChat Logo"/>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.title("üîß Admin ‚Äì Gestion des utilisateurs")

    # Bouton retour
    if st.button("‚¨ÖÔ∏è Retour"):
        navigate("main_app")
        #st.session_state.current_screen = "main_app"
        

    db = database.SessionLocal()

    # -------------------------------------- #
    # 1) Formulaire pour cr√©er un nouvel admin
    # -------------------------------------- #
    with st.expander("‚ûï Cr√©er un nouveau compte admin"):
        with st.form("create_admin_form"):
            new_username = st.text_input("Nom d'utilisateur")
            new_email = st.text_input("Email (optionnel)") # noqa: F841
            new_password = st.text_input("Mot de passe", type="password")
            if st.form_submit_button("Cr√©er"):
                if not new_username or not new_password:
                    st.error("Nom et mot de passe obligatoires.")
                else:
                    try:
                        crud.create_admin(db, new_username, new_password)
                        st.success(f"Compte admin **{new_username}** cr√©√©.")
                    except Exception as exc:
                        st.error(f"Erreur : {exc}")

    st.markdown("---")
    st.header("üìä Reporting ‚Äî Statistiques d‚Äôutilisation & interactions")

    # Guard admin (au cas o√π)
    user = st.session_state.get("user")
    if not user or user.get("role") != "admin":
        st.error("Acc√®s refus√© : administrateur requis.")
        st.stop()

    today = datetime.utcnow().date()
    date_from = st.date_input("Du", today - timedelta(days=7), key="rep_from")
    date_to   = st.date_input("Au", today, key="rep_to")
    evt_types = st.multiselect("Types d'√©v√©nements",
                           ["query","upload","feedback","error"],
                           default=["query","upload","feedback"], key="rep_types")
    user_filter = st.text_input("User ID (optionnel)", key="rep_user")

    df = _load_reporting_df(date_from, date_to, evt_types, user_filter)

    colA, colB, colC, colD = st.columns(4)
    colA.metric("√âv√©nements", int(len(df)))
    colB.metric("Requ√™tes", int((df.event_type == "query").sum() if not df.empty else 0))
    errors_count = 0 if df.empty else int(((df.status == "error") | (df.event_type == "error")).sum())
    colC.metric("Erreurs", errors_count)
    lat_avg = 0 if df.empty or df["latency_ms"].isna().all() else float(df["latency_ms"].mean())
    colD.metric("Latence moyenne", f"{lat_avg:.0f} ms")

    c1, c2, c3 = st.columns(3)
    with c1:
        st.subheader("Volume par jour")
        if df.empty:
            st.info("Aucune donn√©e.")
        else:
            daily = df.groupby(df["created_at"].dt.date).size().reset_index(name="events")
            st.line_chart(daily.set_index("created_at"))

    with c2:
        st.subheader("Top utilisateurs (requ√™tes)")
        if df.empty:
            st.info("Aucune donn√©e.")
        else:
            topu = (df[df.event_type == "query"].groupby("user_id").size().sort_values(ascending=False).head(10))
            if topu.empty: 
                st.info("Aucune requ√™te.")
            else:          
                st.bar_chart(topu)

    with c3:
        st.subheader("Feedback")
        if df.empty:
            st.info("Aucune donn√©e.")
        else:
            fb = df[df["feedback"].notna()].groupby("feedback").size().rename("count")
            if fb.empty: 
                st.info("Aucun feedback.")
            else:        
                st.bar_chart(fb)

    st.subheader("D√©tails (export CSV)")
    if df.empty:
        st.info("Rien √† afficher.")
    else:
        st.dataframe(df.sort_values("created_at", ascending=False), use_container_width=True)
        st.download_button("T√©l√©charger CSV", df.to_csv(index=False), "reporting.csv")

    # -------------------------------------- #
    # 2) Liste et actions sur les utilisateurs
    # -------------------------------------- #
    users = crud.list_users(db)
    if "selected_user_id" not in st.session_state:
        st.session_state.selected_user_id = None

    for u in users:
        action = _user_row(u)
        if action == "delete":
            crud.delete_user(db, u.id)
            

        # Affiche la fiche si selectionn√©e
        if st.session_state.selected_user_id == u.id:
            _user_detail(u)
